<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="conf/suppressions.xml"/>
    </module>
    <module name="SuppressionCommentFilter"/>

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!--
    <module name="PackageHtml"/>
    -->
    <module name="JavadocPackage">
        <property name="allowLegacy" value="true"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!--
    <module name="StrictDuplicateCode"/>
    -->
    <module name="FileLength"/>
    <module name="FileTabCharacter"/>

    <!-- Checks for Headers -->
    <module name="Header">
        <property name="headerFile" value="${basedir}/LICENSE"/>
        <!-- Ignore the second line with the copyright date -->
        <property name="ignoreLines" value="2"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <module name="TreeWalker">
        <module name="FileContentsHolder"/>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowUndeclaredRTE" value="true"/>
        </module>
        -->
        <module name="JavadocType"/>
        <!--
        <module name="JavadocVariable">
            <property name="scope" value="public"/>
        </module>
        -->
        <module name="JavadocStyle">
            <!-- Test for closing tags is broken. -->
            <property name="checkHtml" value="false"/>
        </module>
        <module name="TrailingComment"/>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <!--
        <module name="AbstractClassName"/>
        -->
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>
        <module name="MethodTypeParameterName"/>
        <module name="ClassTypeParameterName"/>


        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <!--
            <property name="ignorePattern" value="^ \* @version .*$"/>
            -->
            <property name="ignorePattern"
                value="^(import| \* @(see|version)) .*$"/>
        </module>
        <module name="MethodLength"/>
        <!-- Double the default (20) because we have opening braces on new
        line. -->
        <module name="AnonInnerLength">
            <property name="max" value="40"/>
        </module>
        <module name="ParameterNumber"/>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <!-- Allow inline array initialisation -->
            <property name="tokens"
                value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS,TYPECAST"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <!-- Allow no whitespace after casts -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <!-- Need to be selective or this gets ridiculous -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="tokens" value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,PLUS,PLUS_ASSIGN,MINUS,MINUS_ASSIGN,LAND,LOR,NOT_EQUAL,EQUAL,STAR,STAR_ASSIGN,MOD_ASSIGN,MOD,DIV,DIV_ASSIGN,GE,LE,GT,LT,LITERAL_IF,LITERAL_ELSE,LITERAL_DO,LITERAL_WHILE,LITERAL_FOR,LITERAL_RETURN,LITERAL_CATCH,LITERAL_CATCH"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- I like inline conditionals!
        <module name="AvoidInlineConditionals"/>
        -->
        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!-- allow shadowing of parameters -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <module name="InnerAssignment"/>
        <!--
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true"/>
        </module>
        -->
        <module name="MissingSwitchDefault"/>
        <module name="DefaultComesLast"/>
        <module name="RedundantThrows">
            <property name="allowSubclasses" value="true"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="DeclarationOrder"/>
        <module name="ReturnCount">
            <property name="max" value="3"/>
        </module>
        <module name="StringLiteralEquality"/>
        <module name="IllegalCatch"/>
        <module name="PackageDeclaration"/>
        <module name="FallThrough"/>
        <module name="ParameterAssignment"/>
        <module name="ExplicitInitialization"/>
        <module name="UnnecessaryParentheses"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="CovariantEquals"/>
        <module name="ModifiedControlVariable"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="IllegalType"/>
        <!--
        <module name="MissingCtor"/>
        <module name="FinalLocalVariable"/>
        <module name="ArrayTrailingComma"/>
        -->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- requires class to be final, or public methods to be final,
             abstract or empty
        <module name="DesignForExtension"/>
        -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!--
        <module name="FinalParameters"/>
        -->
        <module name="RegexpSinglelineJava">
            <property name="id" value="trailingSpace"/>
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="systemOut"/>
            <property name="format" value="System\.out\.println"/>
            <property name="message" value="Call to System.out.println()"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!--
        <module name="RegexpSinglelineJava">
            <property name="id" value="versionId"/>
            <property name="format" value="@version \$Id"/>
            <property name="message" value="Version control $Id$"/>
        </module>
        -->

        <module name="TodoComment"/>
        <module name="UpperEll"/>
        <module name="Indentation"/>

        <!-- Metrics -->
        <module name="JavaNCSS"/>
        <module name="CyclomaticComplexity"/>
        <!--
        <module name="ClassDataAbstractionCoupling"/>
        <module name="ClassFanOutComplexity"/>
        <module name="NPathComplexity"/>
        -->

        <module name="GenericWhitespace"/>
        <module name="EqualsAvoidNull"/>

        <!-- whether to wrap annotation arrays in {}
        <module name="AnnotationUseStyle"/>
        -->
        <module name="PackageAnnotation"/>
        <module name="NoFinalizer"/>
        <module name="OuterTypeNumber"/>
        <module name="OuterTypeFilename"/>
        <module name="MethodCount"/>
        <module name="OneStatementPerLine"/>
    </module>

</module>
